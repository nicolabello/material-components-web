//
// Copyright 2017 Google Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

@use "sass:list";
@use "./../density/functions" as density-functions;
@use "./../floating-label/mixins" as floating-label-mixins;
@use "./../line-ripple/mixins" as line-ripple-mixins;
@use "./../notched-outline/mixins" as notched-outline-mixins;
@use "./../notched-outline/variables" as notched-outline-variables;
@use "./../ripple/mixins" as ripple-mixins;
@use "./../ripple/functions" as ripple-functions;
@use "./../theme/mixins" as theme-mixins;
@use "./../shape/mixins" as shape-mixins;
@use "./../shape/functions" as shape-functions;
@use "./../feature-targeting/functions" as feature-targeting-functions;
@use "./../feature-targeting/mixins" as feature-targeting-mixins;
@use "./../typography/mixins" as typography-mixins;
@use "helper-text/mixins" as helper-text-mixins;
@use "character-counter/mixins" as character-counter-mixins;
@use "icon/mixins" as icon-mixins;
@use "icon/variables" as icon-variables;
@use "./variables";
@use "./functions";
@use "./../rtl/mixins" as rtl-mixins;

@mixin core-styles($query: feature-targeting-functions.all()) {
  @include ripple($query);
  @include without-ripple($query);
}

@mixin without-ripple($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $feat-color: feature-targeting-functions.create-target($query, color);
  $feat-animation: feature-targeting-functions.create-target($query, animation);

  // postcss-bem-linter: define text-field
  .mdc-text-field {
    // Text Field intentionally omits press ripple, so each state needs to be specified individually.
    @include ripple-mixins.states-base-color(variables.$ink-color, $query: $query, $ripple-target: variables.$ripple-target);
    @include ripple-mixins.states-hover-opacity(ripple-functions.states-opacity(variables.$ink-color, hover), $query: $query, $ripple-target: variables.$ripple-target);
    @include ripple-mixins.states-focus-opacity(ripple-functions.states-opacity(variables.$ink-color, focus), $query: $query, $ripple-target: variables.$ripple-target);

    // Height and baseline
    @include height(variables.$height, $query: $query);

    // Shape
    @include shape-radius(small, $query: $query);

    // Colors
    @include label-color(variables.$label, $query: $query);
    @include ink-color(variables.$ink-color, $query: $query);
    @include placeholder-color(variables.$placeholder-ink-color, $query: $query);
    @include caret-color(primary, $query: $query);
    @include bottom-line-color(variables.$bottom-line-idle, $query: $query);
    @include hover-bottom-line-color(variables.$bottom-line-hover, $query: $query);
    @include line-ripple-color_(primary, $query: $query);
    @include helper-text-mixins.helper-text-color(variables.$helper-text-color, $query: $query);
    @include character-counter-mixins.character-counter-color(variables.$helper-text-color, $query: $query);
    @include icon-mixins.leading-icon-color(variables.$icon-color, $query: $query);
    @include icon-mixins.trailing-icon-color(variables.$icon-color, $query: $query);
    @include fill-color(variables.$background, $query: $query);

    // Floating Label
    @include floating-label_($query);

    // Structural
    @include padding-horizontal_(
      variables.$padding-horizontal,
      0,
      0,
      $query: $query
    );

    @include feature-targeting-mixins.targets($feat-structure) {
      display: inline-flex;
      position: relative;
      box-sizing: border-box;
      overflow: hidden;
      /* @alternate */
      will-change: opacity, transform, color;
    }
  }

  .mdc-text-field__input {
    // Exclude setting line-height to keep caret (text cursor) same height as the input text in iOS browser.
    @include typography-mixins.typography(subtitle1, $exclude-props: (line-height), $query: $query);

    @include feature-targeting-mixins.targets($feat-structure) {
      width: 100%;
      min-width: 0; // Fixes flex issues on Firefox
      height: variables.$input-height;
      border: none;
      border-radius: 0;
      background: none;
      appearance: none;
      padding: 0;

      // Remove built-in trailing clear icon on IE11
      &::-ms-clear {
        display: none;
      }
    }

    @include feature-targeting-mixins.targets($feat-animation) {
      transition: functions.transition(opacity);
    }

    @include placeholder-selector_ {
      @include feature-targeting-mixins.targets($feat-animation) {
        transition: functions.transition(opacity, $duration: 67ms);
      }

      @include feature-targeting-mixins.targets($feat-structure) {
        opacity: 0;
      }
    }

    // Always show placeholder for text fields that has no
    // label and show only on focused state when label is present.
    .mdc-text-field--fullwidth &,
    .mdc-text-field--no-label &,
    .mdc-text-field--focused & {
      @include placeholder-selector_ {
        @include feature-targeting-mixins.targets($feat-animation) {
          transition-delay: 40ms;
          transition-duration: 110ms;
        }

        @include feature-targeting-mixins.targets($feat-structure) {
          opacity: 1;
        }
      }
    }

    &:focus {
      @include feature-targeting-mixins.targets($feat-structure) {
        outline: none;
      }
    }

    // Remove red outline on firefox
    &:invalid {
      @include feature-targeting-mixins.targets($feat-structure) {
        box-shadow: none;
      }
    }

    // Keep Chrome autofill behind the notched outline
    &:-webkit-autofill {
      @include feature-targeting-mixins.targets($feat-structure) {
        z-index: auto !important;
      }
    }
  }

  // stylelint-disable-next-line plugin/selector-bem-pattern
  // Move label when text-field gets auto-filled in Chrome.
  .mdc-text-field__input:-webkit-autofill + .mdc-floating-label {
    @include feature-targeting-mixins.targets($feat-structure) {
      transform: translateY(-50%) scale(.75);
      cursor: auto;
    }
  }

  .mdc-text-field--outlined {
    @include outlined_($query);
  }

  .mdc-text-field--outlined.mdc-text-field--focused {
    @include outlined-focused_($query);
  }

  .mdc-text-field--outlined.mdc-text-field--disabled {
    @include outlined-disabled_($query);
  }

  .mdc-text-field--with-leading-icon {
    @include with-leading-icon_($query);
  }

  .mdc-text-field--with-leading-icon.mdc-text-field--outlined {
    @include outlined-with-leading-icon_($query);
  }

  @include required-label-asterisk_ {
    @include feature-targeting-mixins.targets($feat-structure) {
      margin-left: 1px;
      content: "*";
    }
  }

  .mdc-text-field--textarea {
    @include textarea_($query);
  }

  .mdc-text-field--fullwidth {
    @include fullwidth_($query);
  }

  .mdc-text-field--fullwidth.mdc-text-field--invalid {
    @include fullwidth-invalid_($query);
  }

  // postcss-bem-linter: define text-field-helper-text
  // stylelint-disable plugin/selector-bem-pattern
  .mdc-text-field-helper-line {
    @include feature-targeting-mixins.targets($feat-structure) {
      display: flex;
      justify-content: space-between;
      box-sizing: border-box;
    }

    .mdc-text-field + & {
      @include feature-targeting-mixins.targets($feat-structure) {
        padding-right: variables.$helper-line-padding;
        padding-left: variables.$helper-line-padding;
      }
    }
  }
  // stylelint-enable plugin/selector-bem-pattern
  // postcss-bem-linter: end

  // mdc-form-field tweaks to align text field label correctly
  // stylelint-disable selector-max-type
  .mdc-form-field > .mdc-text-field + label {
    @include feature-targeting-mixins.targets($feat-structure) {
      align-self: flex-start;
    }
  }
  // stylelint-enable selector-max-type

  .mdc-text-field--focused {
    @include focused_($query);
  }

  .mdc-text-field--invalid {
    @include invalid_($query);
  }

  .mdc-text-field--textarea.mdc-text-field--invalid {
    @include textarea-invalid_($query);
  }

  .mdc-text-field--outlined.mdc-text-field--invalid {
    @include outlined-invalid_($query);
  }

  .mdc-text-field--disabled {
    @include disabled_($query);
  }

  .mdc-text-field--textarea.mdc-text-field--disabled {
    @include textarea-disabled_($query);
  }

  .mdc-text-field--end-aligned {
    @include end-aligned_($query);
  }

  @include floating-label-mixins.shake-keyframes(
    text-field-outlined,
    variables.$outlined-label-position-y,
    $query: $query
  );
  @include floating-label-mixins.shake-keyframes(
    text-field-outlined-leading-icon,
    variables.$outlined-label-position-y,
    variables.$outlined-with-leading-icon-label-position-x,
    $query: $query
  );
  @include floating-label-mixins.shake-keyframes(
    text-field-outlined-leading-icon-rtl,
    variables.$outlined-label-position-y,
    -(variables.$outlined-with-leading-icon-label-position-x),
    $query: $query
  );
  @include floating-label-mixins.shake-keyframes(
    textarea,
    variables.$textarea-label-position-y,
    0%,
    $query: $query
  );
}

// This API is intended for use by frameworks that may want to separate the ripple-related styles
// from the other text field styles. It is recommended that most users use `mdc-text-field-core-styles` instead.
@mixin ripple($query: feature-targeting-functions.all()) {
  @include ripple-mixins.common($query); // COPYBARA_COMMENT_THIS_LINE

  .mdc-text-field {
    @include ripple-mixins.surface($query: $query, $ripple-target: variables.$ripple-target);
    @include ripple-mixins.radius-bounded($query: $query, $ripple-target: variables.$ripple-target);
  }

  #{variables.$ripple-target} {
    @include ripple-mixins.target-common($query: $query);
  }
}

///
/// Sets density scale for default text field variant.
///
/// @param {Number | String} $density-scale - Density scale value for component. Supported density scale values `-4`,
///     `-3`, `-2`, `-1`, `0`. Default is `0`.
/// @param {Number} $minimum-height-for-filled-label Sets the minimum height for
///     filled textfields at which to allow floating labels.
///
@mixin density($density-scale, $minimum-height-for-filled-label: variables.$minimum-height-for-filled-label, $query: feature-targeting-functions.all()) {
  $height: density-functions.prop-value(
    $density-config: variables.$density-config,
    $density-scale: $density-scale,
    $property-name: height,
  );

  @include height($height, $minimum-height-for-filled-label: $minimum-height-for-filled-label, $query: $query);
  // TODO(b/151839219): resize icons and adjust label position
  // @if $density-scale < 0 {
  //   @include icon-mixins.size(icon-variables.$dense-icon-size);
  // }
}

///
/// Sets density scale for outlined text field (Excluding outlined text field with leading icon).
///
/// @param {Number | String} $density-scale - Density scale value for component. Supported density scale values `-4`,
///     `-3`, `-2`, `-1`, `0`. Default is `0`.
///
@mixin outlined-density($density-scale, $query: feature-targeting-functions.all()) {
  $height: density-functions.prop-value(
    $density-config: variables.$density-config,
    $density-scale: $density-scale,
    $property-name: height,
  );

  @include outlined-height($height, $query: $query);
  // TODO(b/151839219): resize icons and adjust label position
  // @if $density-scale < 0 {
  //   @include icon-mixins.size(icon-variables.$dense-icon-size);
  // }
}

///
/// Sets density scale for outlined text field with leading icon.
///
/// @param {Number | String} $density-scale - Density scale value for component. Supported density scale values `-4`,
///     `-3`, `-2`, `-1`, `0`. Default is `0`.
///
@mixin outlined-with-leading-icon-density($density-scale, $query: feature-targeting-functions.all()) {
  $height: density-functions.prop-value(
    $density-config: variables.$density-config,
    $density-scale: $density-scale,
    $property-name: height,
  );

  @include outlined-with-leading-icon-height($height, $query: $query);
  // TODO(b/151839219): resize icons and adjust label position
  // @if $density-scale < 0 {
  //   @include icon-mixins.size(icon-variables.$dense-icon-size);
  // }
}

///
/// Sets height of default text field variant.
///
/// @param {Number} $height
/// @param {Number} $minimum-height-for-filled-label Sets the minimum height for
///     filled textfields at which to allow floating labels.
/// @param {Number} $filled-baseline-top The baseline from the top of the field
///.    that the input should be aligned to for a filled variant with a label
/// @access public
///
@mixin height(
  $height,
  $minimum-height-for-filled-label: variables.$minimum-height-for-filled-label,
  $filled-baseline-top: variables.$filled-baseline-top,
  $query: feature-targeting-functions.all()
) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  @include feature-targeting-mixins.targets($feat-structure) {
    height: $height;
  }

  // Filled variant is aligned to baseline...
  @include typography-mixins.baseline($top: $filled-baseline-top, $display: inline-flex, $query: $query);
  // ...unless it is too small to display a label
  @if $height < $minimum-height-for-filled-label {
    @include center-aligned_($query: $query);

    @include feature-targeting-mixins.targets($feat-structure) {
      &:not(.mdc-text-field--outlined) {
        .mdc-floating-label {
          display: none;
        }
      }
    }
  }

  // Outlined and no-label variants are always centered
  &.mdc-text-field--outlined,
  &.mdc-text-field--fullwidth,
  &.mdc-text-field--no-label,
  &.mdc-text-field--textarea {
    @include center-aligned_($query: $query);
  }
}

///
/// Sets height of outlined text field variant (Excluding outlined text field with leading icon).
///
/// @param {Number} $height
/// @access public
///
@mixin outlined-height($height, $query: feature-targeting-functions.all()) {
  $keyframe-suffix: text-field-outlined-#{$height};
  $positionY: variables.get-outlined-label-position-y($height);

  @include notched-outline-mixins.floating-label-float-position-absolute($positionY, $query: $query);

  @at-root {
    @include floating-label-mixins.shake-keyframes($keyframe-suffix, $positionY, $query: $query);
  }

  @include floating-label-mixins.shake-animation($keyframe-suffix, $query: $query);
  // Avoid unnecessary rules for filled variant since this is outlined
  @include height($height, $minimum-height-for-filled-label: 0, $query: $query);
}

///
/// Sets height of outlined text field with leading icon variant.
///
/// @param {Number} $height
/// @access public
///
@mixin outlined-with-leading-icon-height($height, $query: feature-targeting-functions.all()) {
  $keyframe-suffix: text-field-outlined-with-leading-icon-#{$height};
  $positionY: variables.get-outlined-label-position-y($height);

  // For specificity
  &.mdc-text-field--outlined {
    @include notched-outline-mixins.floating-label-float-position-absolute($positionY, 32px, $query: $query);
  }

  @at-root {
    @include floating-label-mixins.shake-keyframes(
      $keyframe-suffix,
      $positionY,
      variables.$outlined-with-leading-icon-label-position-x,
      $query: $query
    );
  }

  @include floating-label-mixins.shake-animation($keyframe-suffix, $query: $query);

  $keyframe-suffix-rtl: #{$keyframe-suffix}-rtl;

  @at-root {
    @include floating-label-mixins.shake-keyframes(
      $keyframe-suffix-rtl,
      $positionY,
      -(variables.$outlined-with-leading-icon-label-position-x),
      $query: $query
    );
  }

  @include rtl-mixins.rtl {
    @include floating-label-mixins.shake-animation($keyframe-suffix, $query: $query);
  }
  // Avoid unnecessary rules for filled variant since this is outlined
  @include height($height, $minimum-height-for-filled-label: 0, $query: $query);
}

///
/// Sets shape radius of default text field variant.
///
/// @param {Number} $radius Shape radius value in `px` or in percentage.
/// @param {Number} $text-field-height Height of default text field variant. Required only when `$radius` is in
///     percentage unit and if text field has custom height. Defaults to `variables.$height`.
/// @param {Boolean} $rtl-reflexive Set to true to flip shape radius in RTL context. Defaults to `false`.
///
@mixin shape-radius(
  $radius,
  $density-scale: variables.$density-scale,
  $rtl-reflexive: false,
  $query: feature-targeting-functions.all()) {
  @if list.length($radius) > 2 {
    @error "Invalid radius: '#{$radius}' component doesn't allow customizing all corners";
  }

  $height: density-functions.prop-value(
    $density-config: variables.$density-config,
    $density-scale: $density-scale,
    $property-name: height,
  );

  $masked-radius: shape-functions.mask-radius($radius, 1 1 0 0);

  @include shape-mixins.radius(
    shape-functions.resolve-percentage-radius($height, $masked-radius),
    $rtl-reflexive,
    $query: $query
  );
}

@mixin textarea-shape-radius($radius, $rtl-reflexive: false, $query: feature-targeting-functions.all()) {
  @include notched-outline-mixins.shape-radius($radius, $rtl-reflexive, $query: $query);
}

///
/// Customizes the color of the text entered into an enabled text field.
/// @param {Color} $color - The desired input text color.
///
@mixin ink-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled_ {
    @include ink-color_($color, $query: $query);
  }
}

///
/// Customizes the color of the entered text in a disabled text field.
/// @param {Color} $color - The desired input text color.
///
@mixin disabled-ink-color($color, $query: feature-targeting-functions.all()) {
  @include if-disabled_ {
    @include ink-color_($color, $query: $query);
  }
}

///
/// Customizes the color of the placeholder in an enabled text field.
/// @param {Color} $color - The desired placeholder text color.
///
@mixin placeholder-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled_ {
    @include placeholder-color_($color, $query: $query);
  }
}

///
/// Customizes the color of the placeholder in a disabled text field.
/// @param {Color} $color - The desired placeholder text color.
///
@mixin disabled-placeholder-color($color, $query: feature-targeting-functions.all()) {
  @include if-disabled_ {
    @include placeholder-color_($color, $query: $query);
  }
}

///
/// Customizes the background color of the text field or textarea when enabled.
/// @param {Color} $color - The desired background color.
///
@mixin fill-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled_ {
    @include fill-color_($color, $query: $query);
  }
}

///
/// Customizes the background color of the text field or textarea when disabled.
/// @param {Color} $color - The desired background color.
///
@mixin disabled-fill-color($color, $query: feature-targeting-functions.all()) {
  @include if-disabled_ {
    @include fill-color_($color, $query: $query);
  }
}

///
/// Customizes the text field bottom line color for the filled variant.
/// @param {Color} $color - The desired bottom line color.
///
@mixin bottom-line-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled_ {
    @include bottom-line-color_($color, $query: $query);
  }
}

///
/// Customizes the disabled text field bottom line color for the filled variant.
/// @param {Color} $color - The desired bottom line color.
///
@mixin disabled-bottom-line-color($color, $query: feature-targeting-functions.all()) {
  @include if-disabled_ {
    @include bottom-line-color_($color, $query: $query);
  }
}

///
/// Customizes the hover text field bottom line color for the filled variant.
/// @param {Color} $color - The desired bottom line color.
///
@mixin hover-bottom-line-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled_ {
    @include hover-bottom-line-color_($color, $query: $query);
  }
}

///
/// Customizes the color of the default line ripple of the text field.
/// @param {Color} $color - The desired line ripple color.
///
@mixin line-ripple-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled_ {
    @include line-ripple-color_($color, $query: $query);
  }
}

///
/// Customizes the text color of the label in an enabled text field.
/// @param {Color} $color - The desired label text color.
///
@mixin label-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled_ {
    @include label-ink-color_($color, $query: $query);
  }
}

///
/// Customizes the text color of the label in a disabled text field.
/// @param {Color} $color - The desired label text color.
///
@mixin disabled-label-color($color, $query: feature-targeting-functions.all()) {
  @include if-disabled_ {
    @include label-ink-color_($color, $query: $query);
  }
}

///
/// Customizes the border color of the outlined text field or textarea.
/// @param {Color} $color - The desired outline border color.
///
@mixin outline-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled_ {
    @include notched-outline-mixins.color($color, $query: $query);
  }
}

///
/// Customizes the outline border color when the text field or textarea is hovered.
/// @param {Color} $color - The desired outline border color.
///
@mixin hover-outline-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled_ {
    @include hover-outline-color_($color, $query: $query);
  }
}

///
/// Customizes the outline border color when the text field or textarea is focused.
/// @param {Color} $color - The desired outline border color.
///
@mixin focused-outline-color($color, $query: feature-targeting-functions.all()) {
  @include if-enabled_ {
    @include focused-outline-color_($color, $query: $query);
  }
}

///
/// Customizes the outline border color when the text field or textarea is disabled.
/// @param {Color} $color - The desired outline border color.
///
@mixin disabled-outline-color($color, $query: feature-targeting-functions.all()) {
  @include if-disabled_ {
    @include notched-outline-mixins.color($color, $query: $query);
  }
}

///
/// Customizes the caret color of the text field or textarea.
/// @param {Color} $color - The desired caret color.
///
@mixin caret-color($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-text-field__input {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(caret-color, $color);
    }
  }
}

// Private mixins

// Baseline

/// Adds horizontal padding to the text field
///
/// @param {Number} $padding - left and right-side padding
/// @param {Number} $left-with-leading-icon - left-side padding when a leading
///     icon is present
/// @param {Number} $right-with-trailing-icon - right-side padding when a
///     trailing icon is present
@mixin padding-horizontal_(
  $padding,
  $left-with-leading-icon,
  $right-with-trailing-icon,
  $query: feature-targeting-functions.all()
) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include feature-targeting-mixins.targets($feat-structure) {
    padding: 0 $padding;

    &.mdc-text-field--with-leading-icon {
      @include rtl-mixins.reflexive-property(
        padding,
        $left-with-leading-icon,
        $padding
      );
    }

    &.mdc-text-field--with-trailing-icon {
      @include rtl-mixins.reflexive-property(
        padding,
        $padding,
        $right-with-trailing-icon
      );
    }

    &.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon {
      @include rtl-mixins.reflexive-property(
        padding,
        $left-with-leading-icon,
        $right-with-trailing-icon
      );
    }
  }
}

// Removes filled baseline alignment
@mixin center-aligned_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include feature-targeting-mixins.targets($feat-structure) {
    // In order for a flexbox container to participate in baseline alignment,
    // it follows these rules to determine where its baseline is:
    // https://www.w3.org/TR/css-flexbox-1/#flex-baselines
    //
    // In order to avoid leading icons "controlling" the baseline (since they
    // are the first child), flexbox will generate a baseline from any child
    // flex items that participate in baseline alignment.
    //
    // Icons are set to "align-self: center", while all other children are
    // aligned to baseline. The next problem is deciding which child is
    // used to determine the baseline.
    //
    // According to spec, the item with the largest distance between its
    // baseline and the edge of the cross axis is placed flush with that edge,
    // making it the baseline of the container.
    // https://www.w3.org/TR/css-flexbox-1/#baseline-participation
    //
    // For the filled variant, the pseudo ::before strut is the "largest"
    // child since the input has a height of 28px and the strut is 40px. We
    // can emulate center alignment and force the baseline to use the input
    // text by making the input the full height of the container and removing
    // the baseline strut.

    // TODO: IE11 does not respect this, and makes the leading icon (if present)
    // the baseline.
    .mdc-text-field__input {
      height: 100%;
    }

    &.mdc-text-field--textarea {
      .mdc-text-field__input {
        height: auto;
      }
    }

    &::before {
      display: none;
    }
  }
}

@mixin disabled_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include bottom-line-color_(variables.$disabled-border, $query: $query);
  @include ink-color_(variables.$disabled-ink-color, $query: $query);
  @include placeholder-color_(variables.$disabled-placeholder-ink-color, $query: $query);
  @include label-ink-color_(variables.$disabled-label-color, $query: $query);
  @include helper-text-mixins.helper-text-color_(variables.$disabled-helper-text-color, $query: $query);
  @include character-counter-mixins.character-counter-color_(variables.$disabled-helper-text-color, $query: $query);
  @include icon-mixins.leading-icon-color_(variables.$disabled-icon, $query: $query);
  @include icon-mixins.trailing-icon-color_(variables.$disabled-icon, $query: $query);
  @include fill-color_(variables.$disabled-background, $query: $query);

  @media screen and (-ms-high-contrast: active) {
    @include bottom-line-color_(GrayText, $query: $query);
    @include placeholder-color_(GrayText, $query: $query);
    @include label-ink-color_(GrayText, $query: $query);
    @include helper-text-mixins.helper-text-color_(GrayText, $query: $query);
    @include character-counter-mixins.character-counter-color_(GrayText, $query: $query);
    @include icon-mixins.leading-icon-color_(GrayText, $query: $query);
    @include icon-mixins.trailing-icon-color_(GrayText, $query: $query);
  }

  @include feature-targeting-mixins.targets($feat-structure) {
    pointer-events: none;
  }

  .mdc-floating-label {
    @include feature-targeting-mixins.targets($feat-structure) {
      cursor: default;
    }
  }
}

@mixin invalid_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include bottom-line-color(variables.$error, $query: $query);
  @include hover-bottom-line-color(variables.$error, $query: $query);
  @include line-ripple-color(variables.$error, $query: $query);
  @include label-color(variables.$error, $query: $query);
  @include helper-text-mixins.helper-text-validation-color(variables.$error, $query: $query);
  @include caret-color(variables.$error, $query: $query);
  @include icon-mixins.trailing-icon-color(variables.$error, $query: $query);

  + .mdc-text-field-helper-line .mdc-text-field-helper-text--validation-msg {
    @include feature-targeting-mixins.targets($feat-structure) {
      opacity: 1;
    }
  }
}

@mixin focused_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include label-color(variables.$focused-label-color, $query: $query);

  + .mdc-text-field-helper-line .mdc-text-field-helper-text:not(.mdc-text-field-helper-text--validation-msg) {
    @include feature-targeting-mixins.targets($feat-structure) {
      opacity: 1;
    }
  }
}

@mixin required-label-asterisk_() {
  .mdc-text-field__input:required ~ {
    .mdc-floating-label::after,
    .mdc-notched-outline .mdc-floating-label::after {
      @content;
    }
  }
}

///
/// Sets shape radius of outlined text field variant.
///
/// @param {Number} $radius Shape radius value in `px` or in percentage.
/// @param {Number} $text-field-height Height of outlined text field variant. Required only when `$radius` is in
///     percentage unit and if text field has custom height. Defaults to `variables.$height`.
/// @param {Boolean} $rtl-reflexive Set to true to flip shape radius in RTL context. Defaults to `false`.
///
@mixin outline-shape-radius(
  $radius,
  $density-scale: variables.$density-scale,
  $rtl-reflexive: false,
  $query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $height: density-functions.prop-value(
    $density-config: variables.$density-config,
    $density-scale: $density-scale,
    $property-name: height,
  );

  $resolved-radius: list.nth(shape-functions.resolve-percentage-radius($height, shape-functions.prop-value($radius)), 1);

  @if (list.length(shape-functions.prop-value($radius)) > 1) {
    // stylelint-disable max-line-length
    @warn "mdc-text-field-outline-shape-radius only supports a single radius; see https://github.com/material-components/material-components-web/issues/4140";
    // stylelint-enable
  }

  .mdc-notched-outline {
    @include notched-outline-mixins.shape-radius($resolved-radius, $rtl-reflexive, $query: $query);
  }

  @if ($resolved-radius > notched-outline-variables.$leading-width) {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-property(padding, $resolved-radius + notched-outline-variables.$padding, 0);
    }

    + .mdc-text-field-helper-line {
      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-property(padding, $resolved-radius + notched-outline-variables.$padding, $resolved-radius);
      }
    }
  }
}

@mixin floating-label_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  .mdc-floating-label {
    @include feature-targeting-mixins.targets($feat-structure) {
      @include rtl-mixins.reflexive-position(left, variables.$label-offset);

      top: 50%;
      transform: translateY(-50%);
      pointer-events: none;
    }
  }

  // Include these mixins to override above `transform` property.
  //TODO: Remove these from here when floating label is center aligned in all position - this lowers specificity.
  @include floating-label-mixins.float-position(variables.$label-position-y, $query: $query);

  &--textarea {
    .mdc-floating-label {
      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-position(left, notched-outline-variables.$padding);
      }
    }
  }

  &--outlined {
    .mdc-floating-label {
      @include feature-targeting-mixins.targets($feat-structure) {
        @include rtl-mixins.reflexive-position(left, notched-outline-variables.$padding);
      }
    }

    &--with-leading-icon {
      $icon-padding: icon-variables.$leading-icon-padding-left + icon-variables.$icon-size + icon-variables.$leading-icon-padding-right;
      .mdc-floating-label {
        @include feature-targeting-mixins.targets($feat-structure) {
          @include rtl-mixins.reflexive-position(left, ($icon-padding - notched-outline-variables.$leading-width));
        }

        &--float-above {
          @include feature-targeting-mixins.targets($feat-structure) {
            @include rtl-mixins.reflexive-position(
              left,
              ($icon-padding - notched-outline-variables.$leading-width) + notched-outline-variables.$padding
            );
          }
        }
      }
    }
  }
}

// Outlined

@mixin outlined-disabled_($query: feature-targeting-functions.all()) {
  @include notched-outline-mixins.color(variables.$outlined-disabled-border, $query: $query);
  @include fill-color_(transparent, $query);

  @media screen and (-ms-high-contrast: active) {
    @include notched-outline-mixins.color(GrayText, $query: $query);
  }
}

@mixin outlined-invalid_($query: feature-targeting-functions.all()) {
  @include outline-color(variables.$error, $query: $query);
  @include hover-outline-color(variables.$error, $query: $query);
  @include focused-outline-color(variables.$error, $query: $query);
}

@mixin outlined-focused_($query: feature-targeting-functions.all()) {
  @include notched-outline-mixins.stroke-width(variables.$outlined-stroke-width, $query: $query);
}

@mixin outlined_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include outline-color(variables.$outlined-idle-border, $query: $query);
  @include hover-outline-color(variables.$outlined-hover-border, $query: $query);
  @include focused-outline-color(primary, $query: $query);
  @include floating-label-mixins.shake-animation(text-field-outlined, $query: $query);
  @include outline-shape-radius(small, $query: $query);
  @include notched-outline-mixins.floating-label-float-position-absolute(variables.$outlined-label-position-y, $query: $query);
  @include notched-outline-mixins.notch-offset(notched-outline-variables.$border-width, $query: $query);
  @include ripple-mixins.states-base-color(transparent, $query: $query, $ripple-target: variables.$ripple-target);
  @include fill-color(transparent, $query: $query);

  @include feature-targeting-mixins.targets($feat-structure) {
    overflow: visible;
  }

  .mdc-text-field__input {
    @include feature-targeting-mixins.targets($feat-structure) {
      display: flex;
      border: none !important; // FF adds unwanted border in HC mode on windows.
      background-color: transparent;
      z-index: 1;
    }
  }

  .mdc-text-field__icon {
    @include feature-targeting-mixins.targets($feat-structure) {
      z-index: 2;
    }
  }

  &.mdc-text-field--focused {
    @include notched-outline-mixins.notch-offset(variables.$outlined-stroke-width, $query: $query);
  }
}

@mixin hover-outline-color_($color, $query: feature-targeting-functions.all()) {
  &:not(.mdc-text-field--focused):hover {
    .mdc-notched-outline {
      @include notched-outline-mixins.color($color, $query: $query);
    }
  }
}

@mixin focused-outline-color_($color, $query: feature-targeting-functions.all()) {
  &.mdc-text-field--focused {
    @include notched-outline-mixins.color($color, $query: $query);
  }
}

// Icons

@mixin with-leading-icon_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include feature-targeting-mixins.targets($feat-structure) {
    $icon-padding: icon-variables.$leading-icon-padding-left + icon-variables.$icon-size + icon-variables.$leading-icon-padding-right;

    .mdc-floating-label {
      @include rtl-mixins.reflexive-position(left, $icon-padding);
    }
  }
}

@mixin outlined-with-leading-icon_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include notched-outline-mixins.floating-label-float-position-absolute(
    variables.$outlined-label-position-y,
    32px,
    $query: $query
  );
  @include floating-label-mixins.shake-animation(text-field-outlined-leading-icon, $query: $query);

  @include rtl-mixins.rtl {
    @include floating-label-mixins.shake-animation(text-field-outlined-leading-icon-rtl, $query: $query);
  }

  .mdc-floating-label {
    @include feature-targeting-mixins.targets($feat-structure) {
      $icon-padding: icon-variables.$leading-icon-padding-left + icon-variables.$icon-size + icon-variables.$leading-icon-padding-right;

      @include rtl-mixins.reflexive-position(
        left,
        $icon-padding - notched-outline-variables.$leading-width
      );
    }
  }
}

// Full Width
@mixin fullwidth_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  @include bottom-line-color(variables.$bottom-line-idle, $query: $query);
  @include disabled-bottom-line-color(variables.$bottom-line-idle, $query: $query);

  @include feature-targeting-mixins.targets($feat-structure) {
    padding: 0;
    width: 100%;
  }

  &:not(.mdc-text-field--textarea) {
    @include ripple-mixins.states-base-color(transparent, $query: $query, $ripple-target: variables.$ripple-target);
    @include fill-color(transparent, $query: $query);

    @include feature-targeting-mixins.targets($feat-structure) {
      display: flex;
    }
  }

  &.mdc-text-field--textarea .mdc-text-field__input {
    @include feature-targeting-mixins.targets($feat-structure) {
      resize: vertical;
    }
  }
}

@mixin fullwidth-invalid_($query: feature-targeting-functions.all()) {
  @include bottom-line-color(variables.$error, $query);
}

// Textarea
@mixin textarea-disabled_($query: feature-targeting-functions.all()) {
  @include outlined-disabled_($query);
  @include fill-color_(variables.$textarea-disabled-background, $query, true);
}

@mixin textarea-invalid_($query: feature-targeting-functions.all()) {
  @include outline-color(variables.$error, $query: $query);
  @include hover-outline-color(variables.$error, $query: $query);
  @include focused-outline-color(variables.$error, $query: $query);
}

@mixin textarea_($query: feature-targeting-functions.all()) {
  // Note: The refactor to add the filled textarea style will result in a lot of the specificity issues that the
  // textarea has being resolved by using the same --outlined variant class as the text field.
  @include outline-color(variables.$outlined-idle-border, $query: $query);
  @include hover-outline-color(variables.$outlined-hover-border, $query: $query);
  @include focused-outline-color(primary, $query: $query);
  @include floating-label-mixins.shake-animation(textarea, $query: $query);
  @include outline-shape-radius(small, $query: $query);
  @include ripple-mixins.states-base-color(transparent, $query: $query, $ripple-target: variables.$ripple-target);
  @include fill-color(transparent, $query: $query);
  @include notched-outline-mixins.floating-label-float-position(variables.$textarea-label-position-y, $query: $query);
  @include character-counter-mixins.character-counter-position(16px, 13px, $query: $query);

  $feat-structure: feature-targeting-functions.create-target($query, structure);
  $feat-animation: feature-targeting-functions.create-target($query, animation);
  $feat-typography: feature-targeting-functions.create-target($query, typography);

  @include feature-targeting-mixins.targets($feat-structure) {
    align-items: center;
    width: auto;
    height: auto;
    padding: 0; // see below for explanation
    overflow: visible;
  }

  @include feature-targeting-mixins.targets($feat-structure) {
    transition: none;
  }

  .mdc-text-field__input {
    @include feature-targeting-mixins.targets($feat-structure) {
      align-self: stretch;
      box-sizing: border-box;
      // Top margin is used to keep the text from overlapping the floating label
      // when scrolling
      margin-top: variables.$textarea-input-margin-top;
      // Bottom and left/right margins are used to add space for the resize handle
      margin-bottom: variables.$textarea-input-handle-margin;
      @include rtl-mixins.reflexive-box(margin, right, variables.$textarea-input-handle-margin);
      // Textarea has horizontal padding instead of the container. This allows the
      // resize handle to extend to the edge of the container.
      padding: 0 variables.$padding-horizontal variables.$textarea-input-padding-bottom;
    }

    @include feature-targeting-mixins.targets($feat-typography) {
      line-height: 1.75rem; // 28sp
    }
  }

  .mdc-text-field-character-counter + .mdc-text-field__input {
    @include feature-targeting-mixins.targets($feat-structure) {
      margin-bottom: 28px; // Leaves space for character counter if it exists.
      padding-bottom: 0;
    }
  }

  .mdc-floating-label {
    @include feature-targeting-mixins.targets($feat-structure) {
      top: 17px;
      width: auto;
      pointer-events: none;
    }

    // Resets center aligning the floating label.
    &:not(.mdc-floating-label--float-above) {
      @include feature-targeting-mixins.targets($feat-structure) {
        transform: none;
      }
    }
  }

  &.mdc-text-field--focused {
    @include outlined-focused_($query);
  }
}

// End aligned
@mixin end-aligned_($query: feature-targeting-functions.all()) {
  $feat-structure: feature-targeting-functions.create-target($query, structure);

  .mdc-text-field__input {
    @include feature-targeting-mixins.targets($feat-structure) {
      // IE11 does not support text-align: end
      /* @noflip */
      text-align: right;
    }

    @include rtl-mixins.rtl {
      @include feature-targeting-mixins.targets($feat-structure) {
        /* @noflip */
        text-align: left;
      }
    }
  }
}

// Customization

@mixin ink-color_($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  .mdc-text-field__input {
    @include feature-targeting-mixins.targets($feat-color) {
      @include theme-mixins.prop(color, $color);
    }
  }
}

@mixin placeholder-color_($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  @include feature-targeting-mixins.targets($feat-color) {
    .mdc-text-field__input {
      @include placeholder-selector_ {
        @include theme-mixins.prop(color, $color);
      }
    }
  }
}

@mixin fill-color_($color, $query: feature-targeting-functions.all(), $addAlternate: false) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  @include feature-targeting-mixins.targets($feat-color) {
    @if ($addAlternate) {
      /* @alternate */
    }
    @include theme-mixins.prop(background-color, $color);
  }
}

@mixin bottom-line-color_($color, $query: feature-targeting-functions.all()) {
  .mdc-line-ripple {
    @include line-ripple-mixins.inactive-color($color, $query: $query);
  }
}

@mixin hover-bottom-line-color_($color, $query: feature-targeting-functions.all()) {
  $feat-color: feature-targeting-functions.create-target($query, color);

  &:hover .mdc-line-ripple {
    @include line-ripple-mixins.inactive-color($color, $query: $query);
  }
}

@mixin line-ripple-color_($color, $query: feature-targeting-functions.all()) {
  .mdc-line-ripple {
    @include line-ripple-mixins.active-color($color, $query: $query);
  }
}

@mixin label-ink-color_($color, $query: feature-targeting-functions.all()) {
  .mdc-floating-label {
    @include floating-label-mixins.ink-color($color, $query: $query);
  }
}

// Selectors

@mixin placeholder-selector_ {
  // GSS will combine selectors with the same content, and some browsers have a
  // CSS quirk where it drops a rule if it does not recognize one of the
  // selectors.
  // To avoid GSS combining the ::placeholder and :-ms-input-placeholder
  // selectors, we wrap them in `@media all`.
  // TODO(b/142329051)
  @media all {
    // ::placeholder needs to be wrapped because IE11 will drop other selectors
    // with the same content
    &::placeholder {
      @content;
    }
  }

  @media all {
    // :-ms-input-placeholder needs to be wrapped because Firefox will drop
    // other selectors with the same content
    &:-ms-input-placeholder {
      @content;
    }
  }
}


// State qualifiers

///
/// Helps style the text-field only when it's enabled.
/// @access private
///
@mixin if-enabled_ {
  &:not(.mdc-text-field--disabled) {
    @content;
  }
}

///
/// Helps style the text-field only when it's disabled.
/// @access private
///
@mixin if-disabled_ {
  &.mdc-text-field--disabled {
    @content;
  }
}
